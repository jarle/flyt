// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:BookLibraryEntity.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// BookLibraryEntity TABLE
class TableBookLibraryEntity extends SqfEntityTableBase {
  TableBookLibraryEntity() {
    // declare properties of EntityTable
    tableName = 'BookLibraryEntities';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBookLibraryEntity();
  }
}

// BookReaderEntity TABLE
class TableBookReaderEntity extends SqfEntityTableBase {
  TableBookReaderEntity() {
    // declare properties of EntityTable
    tableName = 'BookReaderEntities';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.text;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('cursorPosition', DbType.integer, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBookReaderEntity();
  }
}

// BookEntity TABLE
class TableBookEntity extends SqfEntityTableBase {
  TableBookEntity() {
    // declare properties of EntityTable
    tableName = 'BookEntities';
    relationType = RelationType.ONE_TO_ONE;
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('author', DbType.text, isNotNull: false),
      SqfEntityFieldBase('title', DbType.text, isNotNull: false),
      SqfEntityFieldBase('path', DbType.text, isNotNull: false),
      SqfEntityFieldRelationshipBase(
          TableBookReaderEntity.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_ONE,
          fieldName: '_BookReaderEntitiesId',
          isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBookEntity();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class BookLibraryModel extends SqfEntityModelProvider {
  BookLibraryModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    databaseTables = [
      TableBookLibraryEntity.getInstance,
      TableBookReaderEntity.getInstance,
      TableBookEntity.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region BookLibraryEntity
class BookLibraryEntity {
  BookLibraryEntity({this.id, this.name, this.isDeleted}) {
    _setDefaultValues();
  }
  BookLibraryEntity.withFields(this.name, this.isDeleted) {
    _setDefaultValues();
  }
  BookLibraryEntity.withId(this.id, this.name, this.isDeleted) {
    _setDefaultValues();
  }
  BookLibraryEntity.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (BookLibraryEntity)
  int id;
  String name;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (BookLibraryEntity)

  static const bool _softDeleteActivated = true;
  BookLibraryEntityManager __mnBookLibraryEntity;

  BookLibraryEntityManager get _mnBookLibraryEntity {
    return __mnBookLibraryEntity =
        __mnBookLibraryEntity ?? BookLibraryEntityManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [BookLibraryEntity]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [BookLibraryEntity]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, isDeleted];
  }

  static Future<List<BookLibraryEntity>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR BookLibraryEntity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<BookLibraryEntity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <BookLibraryEntity>[];
    try {
      objList = list
          .map((booklibraryentity) => BookLibraryEntity.fromMap(
              booklibraryentity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR BookLibraryEntity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<BookLibraryEntity>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<BookLibraryEntity> objList = <BookLibraryEntity>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = BookLibraryEntity.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns BookLibraryEntity by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns BookLibraryEntity if exist, otherwise returns null
  Future<BookLibraryEntity> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    BookLibraryEntity obj;
    final data = await _mnBookLibraryEntity.getById([id]);
    if (data.length != 0) {
      obj = BookLibraryEntity.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (BookLibraryEntity) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnBookLibraryEntity.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBookLibraryEntity.update(this);
    }

    return id;
  }

  /// saveAs BookLibraryEntity. Returns a new Primary Key value of BookLibraryEntity

  /// <returns>Returns a new Primary Key value of BookLibraryEntity
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<BookLibraryEntity> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<BookLibraryEntity> booklibraryentities) async {
    // final results = _mnBookLibraryEntity.saveAll('INSERT OR REPLACE INTO BookLibraryEntities (id,name,isDeleted)  VALUES (?,?,?)',booklibraryentities);
    // return results; removed in sqfentity_gen 1.3.0+6
    await BookLibraryModel().batchStart();
    for (final obj in booklibraryentities) {
      await obj.save();
    }
    //    return BookLibraryModel().batchCommit();
    final result = await BookLibraryModel().batchCommit();
    for (int i = 0; i < booklibraryentities.length; i++) {
      if (booklibraryentities[i].id == null) {
        booklibraryentities[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnBookLibraryEntity.rawInsert(
              'INSERT OR REPLACE INTO BookLibraryEntities (id,name,isDeleted)  VALUES (?,?,?)',
              [id, name, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'BookLibraryEntity id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'BookLibraryEntity id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'BookLibraryEntity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<BookLibraryEntity>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(
      List<BookLibraryEntity> booklibraryentities) async {
    final results = await _mnBookLibraryEntity.rawInsertAll(
        'INSERT OR REPLACE INTO BookLibraryEntities (id,name,isDeleted)  VALUES (?,?,?)',
        booklibraryentities);
    return results;
  }

  /// Deletes BookLibraryEntity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete BookLibraryEntity invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnBookLibraryEntity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBookLibraryEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover BookLibraryEntity>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover BookLibraryEntity invoked (id=$id)');
    {
      return _mnBookLibraryEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  BookLibraryEntityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BookLibraryEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  BookLibraryEntityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BookLibraryEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion booklibraryentity

// region BookLibraryEntityField
class BookLibraryEntityField extends SearchCriteria {
  BookLibraryEntityField(this.booklibraryentityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  BookLibraryEntityFilterBuilder booklibraryentityFB;

  BookLibraryEntityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  BookLibraryEntityFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    booklibraryentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.EQuals, booklibraryentityFB._addedBlocks)
        : setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.NotEQuals, booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    booklibraryentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.EQualsOrNull, booklibraryentityFB._addedBlocks)
        : setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder isNull() {
    booklibraryentityFB._addedBlocks = setCriteria(
        0,
        booklibraryentityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      booklibraryentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          booklibraryentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booklibraryentityFB._addedBlocks);
      _waitingNot = '';
      booklibraryentityFB
              ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
          booklibraryentityFB._addedBlocks.retVal;
    }
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      booklibraryentityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          booklibraryentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booklibraryentityFB._addedBlocks);
      _waitingNot = '';
      booklibraryentityFB
              ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
          booklibraryentityFB._addedBlocks.retVal;
      booklibraryentityFB
              ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
          booklibraryentityFB._addedBlocks.retVal;
    }
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      booklibraryentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          booklibraryentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booklibraryentityFB._addedBlocks);
      _waitingNot = '';
      booklibraryentityFB
              ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
          booklibraryentityFB._addedBlocks.retVal;
    }
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      booklibraryentityFB._addedBlocks = setCriteria(
          pFirst,
          booklibraryentityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booklibraryentityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        booklibraryentityFB._addedBlocks = setCriteria(
            pFirst,
            booklibraryentityFB.parameters,
            param,
            SqlSyntax.LessThan,
            booklibraryentityFB._addedBlocks);
      } else {
        booklibraryentityFB._addedBlocks = setCriteria(
            pFirst,
            booklibraryentityFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            booklibraryentityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        booklibraryentityFB._addedBlocks = setCriteria(
            pLast,
            booklibraryentityFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            booklibraryentityFB._addedBlocks);
      } else {
        booklibraryentityFB._addedBlocks = setCriteria(
            pLast,
            booklibraryentityFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            booklibraryentityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    booklibraryentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.GreaterThan, booklibraryentityFB._addedBlocks)
        : setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    booklibraryentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.LessThan, booklibraryentityFB._addedBlocks)
        : setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    booklibraryentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, booklibraryentityFB._addedBlocks)
        : setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.LessThan, booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    booklibraryentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, booklibraryentityFB._addedBlocks)
        : setCriteria(pValue, booklibraryentityFB.parameters, param,
            SqlSyntax.GreaterThan, booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }

  BookLibraryEntityFilterBuilder inValues(dynamic pValue) {
    booklibraryentityFB._addedBlocks = setCriteria(
        pValue,
        booklibraryentityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        booklibraryentityFB._addedBlocks);
    _waitingNot = '';
    booklibraryentityFB
            ._addedBlocks.needEndBlock[booklibraryentityFB._blockIndex] =
        booklibraryentityFB._addedBlocks.retVal;
    return booklibraryentityFB;
  }
}
// endregion BookLibraryEntityField

// region BookLibraryEntityFilterBuilder
class BookLibraryEntityFilterBuilder extends SearchCriteria {
  BookLibraryEntityFilterBuilder(BookLibraryEntity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  BookLibraryEntity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  BookLibraryEntityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  BookLibraryEntityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  BookLibraryEntityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  BookLibraryEntityFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  BookLibraryEntityFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  BookLibraryEntityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  BookLibraryEntityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BookLibraryEntityFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BookLibraryEntityFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BookLibraryEntityFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BookLibraryEntityFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  BookLibraryEntityField setField(
      BookLibraryEntityField field, String colName, DbType dbtype) {
    return BookLibraryEntityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  BookLibraryEntityField _id;
  BookLibraryEntityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  BookLibraryEntityField _name;
  BookLibraryEntityField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  BookLibraryEntityField _isDeleted;
  BookLibraryEntityField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (BookLibraryEntity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<BookLibraryEntity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (BookLibraryEntity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnBookLibraryEntity
          .updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnBookLibraryEntity.delete(qparams);
    }
    return r;
  }

  /// Recover List<BookLibraryEntity> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover BookLibraryEntity bulk invoked');
    return _obj._mnBookLibraryEntity.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from BookLibraryEntities ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnBookLibraryEntity.updateBatch(qparams, values);
  }

  /// This method always returns BookLibraryEntity Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<BookLibraryEntity>
  Future<BookLibraryEntity> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnBookLibraryEntity.toList(qparams);
    final data = await objFuture;
    BookLibraryEntity obj;
    if (data.isNotEmpty) {
      obj = BookLibraryEntity.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [BookLibraryEntity]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) booklibraryentityCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final booklibraryentitiesFuture =
        await _obj._mnBookLibraryEntity.toList(qparams);
    final int count = booklibraryentitiesFuture[0]['CNT'] as int;
    if (booklibraryentityCount != null) {
      booklibraryentityCount(count);
    }
    return count;
  }

  /// This method returns List<BookLibraryEntity> [BookLibraryEntity]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<BookLibraryEntity>
  Future<List<BookLibraryEntity>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<BookLibraryEntity> booklibraryentitiesData =
        await BookLibraryEntity.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return booklibraryentitiesData;
  }

  /// This method returns Json String [BookLibraryEntity]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [BookLibraryEntity]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [BookLibraryEntity]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnBookLibraryEntity.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [BookLibraryEntity]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM BookLibraryEntities WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnBookLibraryEntity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [BookLibraryEntity]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnBookLibraryEntity.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await BookLibraryEntity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnBookLibraryEntity.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BookLibraryEntityFilterBuilder

// region BookLibraryEntityFields
class BookLibraryEntityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion BookLibraryEntityFields

//region BookLibraryEntityManager
class BookLibraryEntityManager extends SqfEntityProvider {
  BookLibraryEntityManager()
      : super(BookLibraryModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'BookLibraryEntities';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion BookLibraryEntityManager
// region BookReaderEntity
class BookReaderEntity {
  BookReaderEntity({this.id, this.cursorPosition, this.isDeleted}) {
    _setDefaultValues();
  }
  BookReaderEntity.withFields(this.id, this.cursorPosition, this.isDeleted) {
    _setDefaultValues();
  }
  BookReaderEntity.withId(this.id, this.cursorPosition, this.isDeleted) {
    _setDefaultValues();
  }
  BookReaderEntity.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = o['id'] as String;
    if (o['cursorPosition'] != null) {
      cursorPosition = int.tryParse(o['cursorPosition'].toString());
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    isSaved = true;
  }
  // FIELDS (BookReaderEntity)
  String id;
  int cursorPosition;
  bool isDeleted;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (BookReaderEntity)

// COLLECTIONS & VIRTUALS (BookReaderEntity)
  BookEntity _bookentity;
  BookEntity get bookentity {
    return _bookentity = _bookentity ?? BookEntity();
  }

  set bookentity(BookEntity bookentity) {
    _bookentity = bookentity;
  }

// END COLLECTIONS & VIRTUALS (BookReaderEntity)

  static const bool _softDeleteActivated = true;
  BookReaderEntityManager __mnBookReaderEntity;

  BookReaderEntityManager get _mnBookReaderEntity {
    return __mnBookReaderEntity =
        __mnBookReaderEntity ?? BookReaderEntityManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (cursorPosition != null) {
      map['cursorPosition'] = cursorPosition;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (cursorPosition != null) {
      map['cursorPosition'] = cursorPosition;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (BookReaderEntity)
    if (!forQuery && bookentity != null) {
      map['bookentity'] = await bookentity.toMapWithChildren();
    }
// END COLLECTIONS (BookReaderEntity)

    return map;
  }

  /// This method returns Json String [BookReaderEntity]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [BookReaderEntity]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id, cursorPosition, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, cursorPosition, isDeleted];
  }

  static Future<List<BookReaderEntity>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR BookReaderEntity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<BookReaderEntity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <BookReaderEntity>[];
    try {
      objList = list
          .map((bookreaderentity) => BookReaderEntity.fromMap(
              bookreaderentity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR BookReaderEntity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<BookReaderEntity>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<BookReaderEntity> objList = <BookReaderEntity>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = BookReaderEntity.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

//      RELATIONS OneToOne (BookReaderEntity)
      obj._bookentity = await BookEntity()
          .select()
          ._BookReaderEntitiesId
          .equals(obj.id)
          .toSingle();

//      END RELATIONS OneToOne (BookReaderEntity)

      objList.add(obj);
    }
    return objList;
  }

  /// returns BookReaderEntity by ID if exist, otherwise returns null
  ///
  /// Primary Keys: String id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns BookReaderEntity if exist, otherwise returns null
  Future<BookReaderEntity> getById(String id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    BookReaderEntity obj;
    final data = await _mnBookReaderEntity.getById([id]);
    if (data.length != 0) {
      obj = BookReaderEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

//      RELATIONS OneToOne (BookReaderEntity)
      obj._bookentity = await BookEntity()
          .select()
          ._BookReaderEntitiesId
          .equals(obj.id)
          .toSingle();

//      END RELATIONS OneToOne (BookReaderEntity)

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (BookReaderEntity) object. If the Primary Key (id) field is null, returns Error.
  ///
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  ///
  /// Call the saveAs() method if you do not want to save it when there is another row with the same id

  /// <returns>Returns BoolResult
  Future<BoolResult> save() async {
    final result = BoolResult(success: false);
    try {
      await _mnBookReaderEntity.rawInsert(
          'INSERT ${isSaved ? 'OR REPLACE' : ''} INTO BookReaderEntities (id,cursorPosition,isDeleted)  VALUES (?,?,?)',
          toArgsWithIds());
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

// save() OneToOne relations (BookReaderEntity)
    _bookentity?._BookReaderEntitiesId = id;
    await _bookentity?._save();
// END save() OneToOne relations (BookReaderEntity)

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<BookReaderEntity> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<BookReaderEntity> bookreaderentities) async {
    // final results = _mnBookReaderEntity.saveAll('INSERT OR REPLACE INTO BookReaderEntities (id,cursorPosition,isDeleted)  VALUES (?,?,?)',bookreaderentities);
    // return results; removed in sqfentity_gen 1.3.0+6
    await BookLibraryModel().batchStart();
    for (final obj in bookreaderentities) {
      await obj.save();
    }
    //    return BookLibraryModel().batchCommit();
    final result = await BookLibraryModel().batchCommit();

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns 1
  Future<int> upsert() async {
    try {
      if (await _mnBookReaderEntity.rawInsert(
              'INSERT OR REPLACE INTO BookReaderEntities (id,cursorPosition,isDeleted)  VALUES (?,?,?)',
              [id, cursorPosition, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'BookReaderEntity id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'BookReaderEntity id=$id did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'BookReaderEntity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// Deletes BookReaderEntity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete BookReaderEntity invoked (id=$id)');
    var result = BoolResult();
    {
      result = await BookEntity()
          .select()
          ._BookReaderEntitiesId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnBookReaderEntity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBookReaderEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover BookReaderEntity>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover BookReaderEntity invoked (id=$id)');
    var result = BoolResult();
    if (recoverChilds) {
      result = await BookEntity()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          ._BookReaderEntitiesId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnBookReaderEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  BookReaderEntityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BookReaderEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  BookReaderEntityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BookReaderEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion bookreaderentity

// region BookReaderEntityField
class BookReaderEntityField extends SearchCriteria {
  BookReaderEntityField(this.bookreaderentityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  BookReaderEntityFilterBuilder bookreaderentityFB;

  BookReaderEntityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  BookReaderEntityFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    bookreaderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.EQuals, bookreaderentityFB._addedBlocks)
        : setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.NotEQuals, bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    bookreaderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.EQualsOrNull, bookreaderentityFB._addedBlocks)
        : setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder isNull() {
    bookreaderentityFB._addedBlocks = setCriteria(
        0,
        bookreaderentityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      bookreaderentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          bookreaderentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookreaderentityFB._addedBlocks);
      _waitingNot = '';
      bookreaderentityFB
              ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
          bookreaderentityFB._addedBlocks.retVal;
    }
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      bookreaderentityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          bookreaderentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookreaderentityFB._addedBlocks);
      _waitingNot = '';
      bookreaderentityFB
              ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
          bookreaderentityFB._addedBlocks.retVal;
      bookreaderentityFB
              ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
          bookreaderentityFB._addedBlocks.retVal;
    }
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      bookreaderentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          bookreaderentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookreaderentityFB._addedBlocks);
      _waitingNot = '';
      bookreaderentityFB
              ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
          bookreaderentityFB._addedBlocks.retVal;
    }
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      bookreaderentityFB._addedBlocks = setCriteria(
          pFirst,
          bookreaderentityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookreaderentityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        bookreaderentityFB._addedBlocks = setCriteria(
            pFirst,
            bookreaderentityFB.parameters,
            param,
            SqlSyntax.LessThan,
            bookreaderentityFB._addedBlocks);
      } else {
        bookreaderentityFB._addedBlocks = setCriteria(
            pFirst,
            bookreaderentityFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            bookreaderentityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        bookreaderentityFB._addedBlocks = setCriteria(
            pLast,
            bookreaderentityFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            bookreaderentityFB._addedBlocks);
      } else {
        bookreaderentityFB._addedBlocks = setCriteria(
            pLast,
            bookreaderentityFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            bookreaderentityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    bookreaderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.GreaterThan, bookreaderentityFB._addedBlocks)
        : setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    bookreaderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.LessThan, bookreaderentityFB._addedBlocks)
        : setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    bookreaderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bookreaderentityFB._addedBlocks)
        : setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.LessThan, bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    bookreaderentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bookreaderentityFB._addedBlocks)
        : setCriteria(pValue, bookreaderentityFB.parameters, param,
            SqlSyntax.GreaterThan, bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }

  BookReaderEntityFilterBuilder inValues(dynamic pValue) {
    bookreaderentityFB._addedBlocks = setCriteria(
        pValue,
        bookreaderentityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bookreaderentityFB._addedBlocks);
    _waitingNot = '';
    bookreaderentityFB
            ._addedBlocks.needEndBlock[bookreaderentityFB._blockIndex] =
        bookreaderentityFB._addedBlocks.retVal;
    return bookreaderentityFB;
  }
}
// endregion BookReaderEntityField

// region BookReaderEntityFilterBuilder
class BookReaderEntityFilterBuilder extends SearchCriteria {
  BookReaderEntityFilterBuilder(BookReaderEntity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  BookReaderEntity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  BookReaderEntityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  BookReaderEntityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  BookReaderEntityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  BookReaderEntityFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  BookReaderEntityFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  BookReaderEntityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  BookReaderEntityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BookReaderEntityFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BookReaderEntityFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BookReaderEntityFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BookReaderEntityFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  BookReaderEntityField setField(
      BookReaderEntityField field, String colName, DbType dbtype) {
    return BookReaderEntityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  BookReaderEntityField _id;
  BookReaderEntityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  BookReaderEntityField _cursorPosition;
  BookReaderEntityField get cursorPosition {
    return _cursorPosition =
        setField(_cursorPosition, 'cursorPosition', DbType.integer);
  }

  BookReaderEntityField _isDeleted;
  BookReaderEntityField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (BookReaderEntity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<BookReaderEntity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    // Delete sub records where in (BookEntity) according to DeleteRule.CASCADE
    final idListBookEntityBY_BookReaderEntitiesId = toListPrimaryKeySQL(false);
    final resBookEntityBY_BookReaderEntitiesId = await BookEntity()
        .select()
        .where(
            '_BookReaderEntitiesId IN (${idListBookEntityBY_BookReaderEntitiesId['sql']})',
            parameterValue: idListBookEntityBY_BookReaderEntitiesId['args'])
        .delete(hardDelete);
    if (!resBookEntityBY_BookReaderEntitiesId.success) {
      return resBookEntityBY_BookReaderEntitiesId;
    }

    if (BookReaderEntity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnBookReaderEntity.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnBookReaderEntity.delete(qparams);
    }
    return r;
  }

  /// Recover List<BookReaderEntity> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover BookReaderEntity bulk invoked');
    // Recover sub records where in (BookEntity) according to DeleteRule.CASCADE
    final idListBookEntityBY_BookReaderEntitiesId = toListPrimaryKeySQL(false);
    final resBookEntityBY_BookReaderEntitiesId = await BookEntity()
        .select()
        .where(
            '_BookReaderEntitiesId IN (${idListBookEntityBY_BookReaderEntitiesId['sql']})',
            parameterValue: idListBookEntityBY_BookReaderEntitiesId['args'])
        .update({'isDeleted': 0});
    if (!resBookEntityBY_BookReaderEntitiesId.success) {
      return resBookEntityBY_BookReaderEntitiesId;
    }
    return _obj._mnBookReaderEntity.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from BookReaderEntities ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnBookReaderEntity.updateBatch(qparams, values);
  }

  /// This method always returns BookReaderEntity Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<BookReaderEntity>
  Future<BookReaderEntity> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnBookReaderEntity.toList(qparams);
    final data = await objFuture;
    BookReaderEntity obj;
    if (data.isNotEmpty) {
      obj = BookReaderEntity.fromMap(data[0] as Map<String, dynamic>);
      // final List<String> _loadedFields = loadedFields ?? [];

//      RELATIONS OneToOne (BookReaderEntity)
      obj._bookentity = await BookEntity()
          .select()
          ._BookReaderEntitiesId
          .equals(obj.id)
          .toSingle();

//      END RELATIONS OneToOne (BookReaderEntity)

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [BookReaderEntity]
  ///
  /// <returns>int
  Future<int> toCount(
      [VoidCallback Function(int c) bookreaderentityCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final bookreaderentitiesFuture =
        await _obj._mnBookReaderEntity.toList(qparams);
    final int count = bookreaderentitiesFuture[0]['CNT'] as int;
    if (bookreaderentityCount != null) {
      bookreaderentityCount(count);
    }
    return count;
  }

  /// This method returns List<BookReaderEntity> [BookReaderEntity]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<BookReaderEntity>
  Future<List<BookReaderEntity>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<BookReaderEntity> bookreaderentitiesData =
        await BookReaderEntity.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return bookreaderentitiesData;
  }

  /// This method returns Json String [BookReaderEntity]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [BookReaderEntity]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [BookReaderEntity]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnBookReaderEntity.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [BookReaderEntity]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM BookReaderEntities WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  Future<List<String>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<String> idData = <String>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnBookReaderEntity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as String);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [BookReaderEntity]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnBookReaderEntity.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await BookReaderEntity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnBookReaderEntity.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BookReaderEntityFilterBuilder

// region BookReaderEntityFields
class BookReaderEntityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fCursorPosition;
  static TableField get cursorPosition {
    return _fCursorPosition = _fCursorPosition ??
        SqlSyntax.setField(_fCursorPosition, 'cursorPosition', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion BookReaderEntityFields

//region BookReaderEntityManager
class BookReaderEntityManager extends SqfEntityProvider {
  BookReaderEntityManager()
      : super(BookLibraryModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'BookReaderEntities';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion BookReaderEntityManager
// region BookEntity
class BookEntity {
  BookEntity({this.author, this.title, this.path, this.isDeleted}) {
    _setDefaultValues();
  }
  BookEntity.withFields(this.author, this.title, this.path,
      this._BookReaderEntitiesId, this.isDeleted) {
    _setDefaultValues();
  }
  BookEntity.withId(this.author, this.title, this.path,
      this._BookReaderEntitiesId, this.isDeleted) {
    _setDefaultValues();
  }
  BookEntity.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['author'] != null) {
      author = o['author'] as String;
    }
    if (o['title'] != null) {
      title = o['title'] as String;
    }
    if (o['path'] != null) {
      path = o['path'] as String;
    }
    _BookReaderEntitiesId = o['_BookReaderEntitiesId'] as String;

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (BookEntity)
  int id;
  String author;
  String title;
  String path;
  String _BookReaderEntitiesId;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (BookEntity)

  static const bool _softDeleteActivated = true;
  BookEntityManager __mnBookEntity;

  BookEntityManager get _mnBookEntity {
    return __mnBookEntity = __mnBookEntity ?? BookEntityManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (author != null) {
      map['author'] = author;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (path != null) {
      map['path'] = path;
    }

    if (_BookReaderEntitiesId != null) {
      map['_BookReaderEntitiesId'] = _BookReaderEntitiesId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (author != null) {
      map['author'] = author;
    }

    if (title != null) {
      map['title'] = title;
    }

    if (path != null) {
      map['path'] = path;
    }

    if (_BookReaderEntitiesId != null) {
      map['_BookReaderEntitiesId'] = _BookReaderEntitiesId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [BookEntity]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [BookEntity]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [author, title, path, _BookReaderEntitiesId, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [author, title, path, _BookReaderEntitiesId, isDeleted];
  }

  static Future<List<BookEntity>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR BookEntity.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<BookEntity>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <BookEntity>[];
    try {
      objList = list
          .map((bookentity) =>
              BookEntity.fromMap(bookentity as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR BookEntity.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<BookEntity>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<BookEntity> objList = <BookEntity>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = BookEntity.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns BookEntity by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns BookEntity if exist, otherwise returns null
  Future<BookEntity> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    BookEntity obj;
    final data = await _mnBookEntity.getById([id]);
    if (data.length != 0) {
      obj = BookEntity.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (BookEntity) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> _save() async {
    if (id == null || id == 0) {
      id = await _mnBookEntity.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnBookEntity.update(this);
    }

    return id;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnBookEntity.rawInsert(
              'INSERT OR REPLACE INTO BookEntities (author, title, path, _BookReaderEntitiesId,isDeleted)  VALUES (?,?,?,?,?)',
              [author, title, path, _BookReaderEntitiesId, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'BookEntity id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'BookEntity id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'BookEntity Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// Deletes BookEntity

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete BookEntity invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnBookEntity
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBookEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover BookEntity>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover BookEntity invoked (id=$id)');
    {
      return _mnBookEntity.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  BookEntityFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BookEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  BookEntityFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BookEntityFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion bookentity

// region BookEntityField
class BookEntityField extends SearchCriteria {
  BookEntityField(this.bookentityFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  BookEntityFilterBuilder bookentityFB;

  BookEntityField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  BookEntityFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    bookentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookentityFB.parameters, param, SqlSyntax.EQuals,
            bookentityFB._addedBlocks)
        : setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.NotEQuals, bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    bookentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.EQualsOrNull, bookentityFB._addedBlocks)
        : setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder isNull() {
    bookentityFB._addedBlocks = setCriteria(
        0,
        bookentityFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      bookentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          bookentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookentityFB._addedBlocks);
      _waitingNot = '';
      bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
          bookentityFB._addedBlocks.retVal;
    }
    return bookentityFB;
  }

  BookEntityFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      bookentityFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          bookentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookentityFB._addedBlocks);
      _waitingNot = '';
      bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
          bookentityFB._addedBlocks.retVal;
      bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
          bookentityFB._addedBlocks.retVal;
    }
    return bookentityFB;
  }

  BookEntityFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      bookentityFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          bookentityFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookentityFB._addedBlocks);
      _waitingNot = '';
      bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
          bookentityFB._addedBlocks.retVal;
    }
    return bookentityFB;
  }

  BookEntityFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      bookentityFB._addedBlocks = setCriteria(
          pFirst,
          bookentityFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          bookentityFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        bookentityFB._addedBlocks = setCriteria(pFirst, bookentityFB.parameters,
            param, SqlSyntax.LessThan, bookentityFB._addedBlocks);
      } else {
        bookentityFB._addedBlocks = setCriteria(pFirst, bookentityFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, bookentityFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        bookentityFB._addedBlocks = setCriteria(pLast, bookentityFB.parameters,
            param, SqlSyntax.GreaterThan, bookentityFB._addedBlocks);
      } else {
        bookentityFB._addedBlocks = setCriteria(pLast, bookentityFB.parameters,
            param, SqlSyntax.LessThanOrEquals, bookentityFB._addedBlocks);
      }
    }
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    bookentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.GreaterThan, bookentityFB._addedBlocks)
        : setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    bookentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.LessThan, bookentityFB._addedBlocks)
        : setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    bookentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, bookentityFB._addedBlocks)
        : setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.LessThan, bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    bookentityFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.LessThanOrEquals, bookentityFB._addedBlocks)
        : setCriteria(pValue, bookentityFB.parameters, param,
            SqlSyntax.GreaterThan, bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }

  BookEntityFilterBuilder inValues(dynamic pValue) {
    bookentityFB._addedBlocks = setCriteria(
        pValue,
        bookentityFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        bookentityFB._addedBlocks);
    _waitingNot = '';
    bookentityFB._addedBlocks.needEndBlock[bookentityFB._blockIndex] =
        bookentityFB._addedBlocks.retVal;
    return bookentityFB;
  }
}
// endregion BookEntityField

// region BookEntityFilterBuilder
class BookEntityFilterBuilder extends SearchCriteria {
  BookEntityFilterBuilder(BookEntity obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  BookEntity _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  BookEntityFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  BookEntityFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  BookEntityFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  BookEntityFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  BookEntityFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  BookEntityFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  BookEntityFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BookEntityFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BookEntityFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BookEntityFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BookEntityFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  BookEntityField setField(
      BookEntityField field, String colName, DbType dbtype) {
    return BookEntityField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  BookEntityField _id;
  BookEntityField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  BookEntityField _author;
  BookEntityField get author {
    return _author = setField(_author, 'author', DbType.text);
  }

  BookEntityField _title;
  BookEntityField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  BookEntityField _path;
  BookEntityField get path {
    return _path = setField(_path, 'path', DbType.text);
  }

  BookEntityField __BookReaderEntitiesId;
  BookEntityField get _BookReaderEntitiesId {
    return __BookReaderEntitiesId =
        setField(__BookReaderEntitiesId, '_BookReaderEntitiesId', DbType.text);
  }

  BookEntityField _isDeleted;
  BookEntityField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (BookEntity._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<BookEntity> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (BookEntity._softDeleteActivated && !hardDelete) {
      r = await _obj._mnBookEntity.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnBookEntity.delete(qparams);
    }
    return r;
  }

  /// Recover List<BookEntity> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover BookEntity bulk invoked');
    return _obj._mnBookEntity.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from BookEntities ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnBookEntity.updateBatch(qparams, values);
  }

  /// This method always returns BookEntity Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<BookEntity>
  Future<BookEntity> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnBookEntity.toList(qparams);
    final data = await objFuture;
    BookEntity obj;
    if (data.isNotEmpty) {
      obj = BookEntity.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [BookEntity]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) bookentityCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final bookentitiesFuture = await _obj._mnBookEntity.toList(qparams);
    final int count = bookentitiesFuture[0]['CNT'] as int;
    if (bookentityCount != null) {
      bookentityCount(count);
    }
    return count;
  }

  /// This method returns List<BookEntity> [BookEntity]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<BookEntity>
  Future<List<BookEntity>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<BookEntity> bookentitiesData = await BookEntity.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return bookentitiesData;
  }

  /// This method returns Json String [BookEntity]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [BookEntity]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [BookEntity]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnBookEntity.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [BookEntity]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM BookEntities WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnBookEntity.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [BookEntity]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnBookEntity.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await BookEntity.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnBookEntity.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BookEntityFilterBuilder

// region BookEntityFields
class BookEntityFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fAuthor;
  static TableField get author {
    return _fAuthor =
        _fAuthor ?? SqlSyntax.setField(_fAuthor, 'author', DbType.text);
  }

  static TableField _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField _fPath;
  static TableField get path {
    return _fPath = _fPath ?? SqlSyntax.setField(_fPath, 'path', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion BookEntityFields

//region BookEntityManager
class BookEntityManager extends SqfEntityProvider {
  BookEntityManager()
      : super(BookLibraryModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'BookEntities';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion BookEntityManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o) nextval]) async {
    final val = await BookLibraryModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o) currentval]) async {
    final val = await BookLibraryModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o) currentval]) async {
    final val = await BookLibraryModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class BookLibraryModelSequenceManager extends SqfEntityProvider {
  BookLibraryModelSequenceManager() : super(BookLibraryModel());
}
// END OF ENTITIES
